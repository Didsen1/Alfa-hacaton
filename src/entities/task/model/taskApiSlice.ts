// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import { type Task } from './types/Task';

// Define a service using a base URL and expected endpoints
export const taskApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: 'http://apeople-api.ru/' }),
  reducerPath: 'taskApi',
  // Tag types are used for caching and invalidation.
  tagTypes: ['Task'],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `TaskApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getTask: build.query<Task, { planId: string; taskId: string }>({
      query: ({ planId, taskId }) => `plans/${planId}/task/${taskId}`,
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `taskApiSlice.endpoints.getTask.useQuery`
export const { useGetTaskQuery } = taskApiSlice;
